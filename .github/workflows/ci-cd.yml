name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
      - 'prisma/**'
      - 'package*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
      - 'prisma/**'
      - 'package*.json'

permissions:
  contents: read
  issues: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kundflow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        persist-credentials: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    # Backend
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci --legacy-peer-deps --no-audit
      continue-on-error: true
      id: backend-deps
      
    - name: Retry Backend Dependencies
      if: steps.backend-deps.outcome == 'failure'
      run: |
        cd backend
        rm -rf node_modules package-lock.json
        npm cache clean --force
        npm ci --legacy-peer-deps --no-audit
      
    - name: Generate Prisma Client
      run: |
        cd backend
        npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/kundflow_test

    - name: Run Backend Tests
      id: backend-tests
      run: |
        cd backend
        npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/kundflow_test
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-north-1
        AWS_S3_BUCKET: kundflow-contracts-test
        AWS_TEXTRACT_BUCKET: kundflow-textract-test
        NODE_ENV: test

    - name: Build Backend
      if: success()
      run: |
        cd backend
        npm run build

    # Frontend
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps --no-audit
      continue-on-error: true
      id: frontend-deps

    - name: Retry Frontend Dependencies
      if: steps.frontend-deps.outcome == 'failure'
      run: |
        cd frontend
        rm -rf node_modules package-lock.json
        npm cache clean --force
        npm ci --legacy-peer-deps --no-audit

    - name: Run Frontend Type Check
      run: |
        cd frontend
        npm run type-check

    - name: Run Frontend Tests
      id: frontend-tests
      run: |
        cd frontend
        npm run test
      env:
        VITE_API_URL: https://kundflow-backend.onrender.com

    - name: Build Frontend
      if: success()
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: https://kundflow-backend.onrender.com

    # Notifications
    - name: Notify on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { repo, owner } = context.repo;
          const run_id = context.runId;
          
          let failedStep = '';
          if (steps['backend-tests'].outcome === 'failure') failedStep = 'Backend Tests';
          else if (steps['frontend-tests'].outcome === 'failure') failedStep = 'Frontend Tests';
          else failedStep = 'Build Process';

          const message = `‚ùå Pipeline failed in ${failedStep}
          Repository: ${owner}/${repo}
          Commit: ${context.sha}
          See details: https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
          
          await github.rest.issues.create({
            owner,
            repo,
            title: `Pipeline Failure: ${failedStep}`,
            body: message,
            labels: ['ci-failure']
          });
