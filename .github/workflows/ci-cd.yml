name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
      - 'prisma/**'
      - 'package*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
      - 'prisma/**'
      - 'package*.json'

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '20.x'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: kundflow_test

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Backend
    - name: Install Backend Dependencies
      id: backend-deps
      working-directory: ./backend
      run: npm ci --legacy-peer-deps --no-audit
      
    - name: Generate Prisma Client
      id: prisma-generate
      working-directory: ./backend
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

    - name: Run Backend Tests
      id: backend-tests
      working-directory: ./backend
      run: npm run test
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-north-1
        AWS_S3_BUCKET: kundflow-contracts-test
        AWS_TEXTRACT_BUCKET: kundflow-textract-test
        NODE_ENV: test

    - name: Build Backend
      id: backend-build
      if: success()
      working-directory: ./backend
      run: npm run build

    # Frontend
    - name: Install Frontend Dependencies
      id: frontend-deps
      working-directory: ./frontend
      run: npm ci --legacy-peer-deps --no-audit

    - name: Run Frontend Type Check
      id: frontend-typecheck
      working-directory: ./frontend
      run: npm run type-check

    - name: Run Frontend Tests
      id: frontend-tests
      working-directory: ./frontend
      run: npm run test
      env:
        VITE_API_URL: https://kundflow-backend.onrender.com

    - name: Build Frontend
      id: frontend-build
      if: success()
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_API_URL: https://kundflow-backend.onrender.com

    # Error Handling
    - name: Create Error Issue
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { repo, owner } = context.repo;
          
          const failedJobs = [];
          if (jobs['build-and-test'].steps) {
            for (const step of jobs['build-and-test'].steps) {
              if (step.conclusion === 'failure') {
                failedJobs.push(step.name);
              }
            }
          }
          
          const failureMessage = failedJobs.length > 0
            ? `Failed steps:\n${failedJobs.join('\n')}`
            : 'Pipeline failed with unknown error';
          
          const issue = await github.rest.issues.create({
            owner,
            repo,
            title: `CI Pipeline Failure - ${new Date().toISOString()}`,
            body: `Pipeline failed on commit ${context.sha}\n\n${failureMessage}\n\nSee run: ${context.runId}`,
            labels: ['ci-failure']
          });
          
          console.log(`Created issue #${issue.data.number}`);
